MySQL APOC Views:
Created user songs with password songs and has  access to one schema called songs. In the songs schema there are two tables, node and links.

use song;

-- 4950 links in total
select count(*) from links;

-- 100 songs in total
select count(*) from node;

-- Create the views for Neo4J 

-- view for link
drop view link;
create view link as
select *
from links
order by euclidean
limit 1000;

-- view for node
create view nodes as
select * from node;


-------------------------------------------------------------

Import data into Neo4J:

match (n) detach delete n

call apoc.load.jdbc("jdbc:mysql://localhost:3306/song?serverTimezone=EST5EDT&user=songs&password=songs", "nodes") YIELD row
merge (s:Song {track:row.track, artist:row.artist, tempo:row.tempo, danceability:row.danceability, acousticness:row.acousticness, energy:row.energy, decade:row.decade, genre:row.genre})
return s;

call apoc.load.jdbc("jdbc:mysql://localhost:3306/song?serverTimezone=EST5EDT&user=songs&password=songs", "link") YIELD row
merge (s:Song{track:row.track1})
merge (s2:Song{track:row.track2})
create (s)-[:euclidean{euclidean:row.euclidean}]->(s2)
return s, s2;


Quieres Run in Neo4J (Removed in Settings Connect Result Nodes):

// Similarity Euclidean distance scores comparison

// 1th percentile track relations: highest similarity
match (s1:Song)-[n:euclidean]->(s2:Song)
where n.euclidean < 0.121576
return s1, n, s2;

// 5th percentile track relations: medium similarity
match (s1:Song)-[n:euclidean]->(s2:Song)
where n.euclidean < 0.206442
return s1, n, s2;

// 10th percentile track relations: weak similarity
match (s1:Song)-[n:euclidean]->(s2:Song)
where n.euclidean < 0.259790
return s1, n, s2;


// Characteristic clustering depending on Euclidean distance scores


